{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Hearts_Iface where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (.), (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Hashable
import Data.Int
import Data.Text.Lazy ( Text )
import qualified Data.Text.Lazy as TL
import Data.Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector

import Thrift
import Thrift.Types ()


import Hearts_Types

class Hearts_Iface a where
  enter_arena :: a -> Maybe EntryRequest -> IO EntryResponse
  get_game_info :: a -> Maybe Ticket -> IO GameInfo
  get_hand :: a -> Maybe Ticket -> IO (Vector.Vector Card)
  pass_cards :: a -> Maybe Ticket -> Maybe (Vector.Vector Card) -> IO (Vector.Vector Card)
  get_trick :: a -> Maybe Ticket -> IO Trick
  play_card :: a -> Maybe Ticket -> Maybe Card -> IO Trick
  get_round_result :: a -> Maybe Ticket -> IO RoundResult
  get_game_result :: a -> Maybe Ticket -> IO GameResult
